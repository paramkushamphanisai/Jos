1. Assuming that the following JOS kernel code is correct, what type should variable x have, uintptr_t or physaddr_t?

mystery_t x;
char* value = return_a_pointer();
*value = 10;
x = (mystery_t) value;

Ans: x is of type mystery_t but in the 4th step it holding the Char type C pointer. This is nothing but the virtual address to make it physical addess KADDR() function. So x should be of type uintptr_t only. 

2. What entries (rows) in the page directory have been filled in at this point? What addresses do they map and where do they point? In other words, fill out this table as much as possible:

----Entry---Base Virtual Address----Points to (logically)
----1023----0xFFC00000--------------Page table for top 4MB of phys memory
----1022----0xFF800000
----960-----0xF0000000--------------(KSTACKTOP)bootstack+KSTKSIZE
       
----957-----0xEF400000--------------(UPVT)kern_pgdir (which is read only)
----958-----0xef800000--------------(ULIM)
----956-----0xEF000000--------------(UPAGES)pages (which is read only)
       
----2-------0x00800000--------------UTEXT
----1-------0x00400000--------------UTEMP
----0-------0x00000000--------------empty memory


3. We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernelâ€™s memory? What specific mechanisms protect the kernel memory?

Ans: Generally we us the flags which are called as permission bits PTE_W for writeable and PTE_U for reading for the users.
The virtual memory is divided in the 2 segments ULIM and UTOP. where (ULIM, 4 GB) can only be used by the kernal and UTOP to ULIM is used by both kernal and user and 0x0 to UTOP.

4. What is the maximum amount of physical memory that this operating system can support? Why?

Answer: The Maximum physical memory the OS can support is 2GB because 
PTSIZE is of 4MB, due to that 4 MB memory is taken by UPAGES to store the PageInfo structure and PageInfo is of size 8 BYTES.
Hence, the max count pages would be 512*1024 (4096*1024/8). A single page taks 4096 BYTES fo memeory.
So, max memory is 512*1024*4096 = 2147483648 ~= 2GB

5. How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?

Ans: 
Memeory taken by struct pageInfo 4 MB
Memory taken by pagetable        2 MB { Because each page table is of 4096 bytes, and we have 1024 pages hence, total will be 1024*4096=4MB
                                        So 2GB/ 4MB is 512 pagetable, 512 * 4096 = 2MB}
Memory taken by Pagedir          4KB   { A single page directory take 4096 bytes and can easily map 1024 pagetables}
So solution will be         4MB+2MB+4KB = 6MB + 4KB

6. Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?

Ans:
When the "jmp *%eax" instruction is executed then transaction moves into the virtual kernel address.
Here, the transaction allow the programs to utilize tge lower address space because the  low 4MB of virtual address (va) is mapped to low 4MB of physical address. 