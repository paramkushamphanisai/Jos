1. What is the purpose of having an individual handler function for each exception/interrupt? (i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists in the current implementation could not be provided?)

Ans: The major reason behind the use of the individual handler function for each exception and interrupt is to enforce the kernel level protection. Because we don’t want the user to interfere and handle the kernel-level functions.

2. Did you have to do anything to make the user/softint program behave correctly? The grade script expects it to produce a general protection fault (trap 13), but softint’s code says int $14. Why should this produce interrupt vector 13? What happens if the kernel actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which is interrupt vector 14)?

Ans: No, I feel we should not do anything to the user/softint because the behavior of user/softint is correct. The major reason for not correcting the user/softint is we don’t want to allow users to raise their own interrupt. In our code softint produces the interrupt number 13 because the softint didn’t have permission to invoke the page fault and the processer catches the mismatch and then raises the general protection fault.

3.The break point test case will either generate a break point exception or a general protection fault depending on how you initialized the break point entry in the IDT (i.e., your call to SETGATE from trap_init). Why? How do you need to set it up in order to get the breakpoint exception to work as specified above and what incorrect setup would cause it to trigger a general protection fault?

Ans: We set the IDT to set the privileges level to the breakpoint exception whenever the IDT to 3
SETGATE(idt[T_BRKPT], 0 , GD_KT, entry_brkpt, 3);
So we kept it to 3 we get the break point and if we ket it as 0 we get the user protection. 

4. What do you think is the point of these mechanisms, particularly in light of what the user/softint test program does?
Ans: We use this mechanism to protect the kernel processes from other processes because the kernel processes should not be intercepted by the user processes. Because kernel processes have higher priority over user processes.
